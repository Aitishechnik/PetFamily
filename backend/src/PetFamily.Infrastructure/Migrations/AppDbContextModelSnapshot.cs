// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PetFamily.Infrastructure;

#nullable disable

namespace PetFamily.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PetFamily.Domain.Models.Species.Breed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid>("species_id")
                        .HasColumnType("uuid")
                        .HasColumnName("species_id");

                    b.HasKey("Id")
                        .HasName("pk_breeds");

                    b.HasIndex("species_id")
                        .HasDatabaseName("ix_breeds_species_id");

                    b.ToTable("breeds", (string)null);
                });

            modelBuilder.Entity("PetFamily.Domain.Models.Species.Species", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_species");

                    b.ToTable("species", (string)null);
                });

            modelBuilder.Entity("PetFamily.Domain.Models.Volonteer.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("address");

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("breed");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<string>("HealthInfo")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("health_info");

                    b.Property<double>("Height")
                        .HasColumnType("double precision")
                        .HasColumnName("height");

                    b.Property<string>("HelpStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("help_status");

                    b.Property<bool>("IsNeutered")
                        .HasColumnType("boolean")
                        .HasColumnName("is_neutered");

                    b.Property<bool>("IsVaccinated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_vaccinated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("OwnerPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("owner_phone_number");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("species");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");

                    b.Property<Guid?>("volonteer_id")
                        .HasColumnType("uuid")
                        .HasColumnName("volonteer_id");

                    b.ComplexProperty<Dictionary<string, object>>("PetType", "PetFamily.Domain.Models.Volonteer.Pet.PetType#PetType", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<long>("BreedID")
                                .HasMaxLength(100)
                                .HasColumnType("bigint")
                                .HasColumnName("breed_id");

                            b1.Property<long>("SpeciesID")
                                .HasMaxLength(100)
                                .HasColumnType("bigint")
                                .HasColumnName("species_id");
                        });

                    b.HasKey("Id")
                        .HasName("pk_pets");

                    b.HasIndex("volonteer_id")
                        .HasDatabaseName("ix_pets_volonteer_id");

                    b.ToTable("pets", (string)null);
                });

            modelBuilder.Entity("PetFamily.Domain.Models.Volonteer.Volonteer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.ComplexProperty<Dictionary<string, object>>("PersonalData", "PetFamily.Domain.Models.Volonteer.Volonteer.PersonalData#PersonalData", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasMaxLength(320)
                                .HasColumnType("character varying(320)")
                                .HasColumnName("email");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("full_name");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("phone_number");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("ProfessionalData", "PetFamily.Domain.Models.Volonteer.Volonteer.ProfessionalData#ProfessionalData", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)")
                                .HasColumnName("description");

                            b1.Property<int>("ExperienceInYears")
                                .HasColumnType("integer")
                                .HasColumnName("experience_in_years");
                        });

                    b.HasKey("Id")
                        .HasName("pk_volonteers");

                    b.ToTable("volonteers", (string)null);
                });

            modelBuilder.Entity("PetFamily.Domain.Models.Species.Breed", b =>
                {
                    b.HasOne("PetFamily.Domain.Models.Species.Species", null)
                        .WithMany("Breeds")
                        .HasForeignKey("species_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_breeds_species_species_id");
                });

            modelBuilder.Entity("PetFamily.Domain.Models.Volonteer.Pet", b =>
                {
                    b.HasOne("PetFamily.Domain.Models.Volonteer.Volonteer", null)
                        .WithMany("Pets")
                        .HasForeignKey("volonteer_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_pets_volonteers_volonteer_id");

                    b.OwnsOne("PetFamily.Domain.Models.Volonteer.DonationDetailsWrapper", "DonationDetails", b1 =>
                        {
                            b1.Property<Guid>("PetId")
                                .HasColumnType("uuid");

                            b1.HasKey("PetId")
                                .HasName("pk_pets");

                            b1.ToTable("pets");

                            b1.ToJson("donation_details");

                            b1.WithOwner()
                                .HasForeignKey("PetId")
                                .HasConstraintName("fk_pets_pets_pet_id");

                            b1.OwnsMany("PetFamily.Domain.Models.Volonteer.DonationDetails", "DonationDetails", b2 =>
                                {
                                    b2.Property<Guid>("DonationDetailsWrapperPetId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("__synthesizedOrdinal")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Description")
                                        .IsRequired()
                                        .HasMaxLength(2000)
                                        .HasColumnType("character varying(2000)");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)");

                                    b2.HasKey("DonationDetailsWrapperPetId", "__synthesizedOrdinal");

                                    b2.ToTable("pets");

                                    b2.ToJson("donation_details");

                                    b2.WithOwner()
                                        .HasForeignKey("DonationDetailsWrapperPetId")
                                        .HasConstraintName("fk_pets_pets_donation_details_wrapper_pet_id");
                                });

                            b1.Navigation("DonationDetails");
                        });

                    b.Navigation("DonationDetails")
                        .IsRequired();
                });

            modelBuilder.Entity("PetFamily.Domain.Models.Volonteer.Volonteer", b =>
                {
                    b.OwnsOne("PetFamily.Domain.Models.Volonteer.SocialNetwokrsWrapper", "SocialNetworks", b1 =>
                        {
                            b1.Property<Guid>("VolonteerId")
                                .HasColumnType("uuid");

                            b1.HasKey("VolonteerId");

                            b1.ToTable("volonteers");

                            b1.ToJson("social_networks");

                            b1.WithOwner()
                                .HasForeignKey("VolonteerId")
                                .HasConstraintName("fk_volonteers_volonteers_id");

                            b1.OwnsMany("PetFamily.Domain.Models.Volonteer.SocialNetwork", "SocialNetworks", b2 =>
                                {
                                    b2.Property<Guid>("SocialNetwokrsWrapperVolonteerId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("__synthesizedOrdinal")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Link")
                                        .IsRequired()
                                        .HasMaxLength(750)
                                        .HasColumnType("character varying(750)");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)");

                                    b2.HasKey("SocialNetwokrsWrapperVolonteerId", "__synthesizedOrdinal");

                                    b2.ToTable("volonteers");

                                    b2.ToJson("social_networks");

                                    b2.WithOwner()
                                        .HasForeignKey("SocialNetwokrsWrapperVolonteerId")
                                        .HasConstraintName("fk_volonteers_volonteers_social_netwokrs_wrapper_volonteer_id");
                                });

                            b1.Navigation("SocialNetworks");
                        });

                    b.OwnsOne("PetFamily.Domain.Models.Volonteer.DonationDetailsWrapper", "DonationDetails", b1 =>
                        {
                            b1.Property<Guid>("VolonteerId")
                                .HasColumnType("uuid");

                            b1.HasKey("VolonteerId");

                            b1.ToTable("volonteers");

                            b1.ToJson("donation_details");

                            b1.WithOwner()
                                .HasForeignKey("VolonteerId")
                                .HasConstraintName("fk_volonteers_volonteers_id");

                            b1.OwnsMany("PetFamily.Domain.Models.Volonteer.DonationDetails", "DonationDetails", b2 =>
                                {
                                    b2.Property<Guid>("DonationDetailsWrapperVolonteerId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("__synthesizedOrdinal")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Description")
                                        .IsRequired()
                                        .HasMaxLength(2000)
                                        .HasColumnType("character varying(2000)");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)");

                                    b2.HasKey("DonationDetailsWrapperVolonteerId", "__synthesizedOrdinal");

                                    b2.ToTable("volonteers");

                                    b2.ToJson("donation_details");

                                    b2.WithOwner()
                                        .HasForeignKey("DonationDetailsWrapperVolonteerId")
                                        .HasConstraintName("fk_volonteers_volonteers_donation_details_wrapper_volonteer_id");
                                });

                            b1.Navigation("DonationDetails");
                        });

                    b.Navigation("DonationDetails")
                        .IsRequired();

                    b.Navigation("SocialNetworks")
                        .IsRequired();
                });

            modelBuilder.Entity("PetFamily.Domain.Models.Species.Species", b =>
                {
                    b.Navigation("Breeds");
                });

            modelBuilder.Entity("PetFamily.Domain.Models.Volonteer.Volonteer", b =>
                {
                    b.Navigation("Pets");
                });
#pragma warning restore 612, 618
        }
    }
}
